blueprint:
  name: Ventilatiesysteem met Hysteresis en Tweaks (4 Ventilatoren) - Versie 2.62
  description: >
    Deze blueprint bestuurt 4 ventilatoren in verschillende kamers op basis van temperatuur, hysteresis en neerslagdrempels.
    Elke ventilator kan worden uitgeschakeld bij regen, en er wordt gebruikgemaakt van een weersensor.
    Het systeem herhaalt zichzelf elke 5 minuten, maar de schakeltijd en andere instellingen kunnen door de gebruiker worden aangepast.

  domain: automation
  source_url: https://github.com/bibabouke/homeassistant/tree/main/blueprints/gebouwbeheersysteem

  input:
    fan_switch_woonkamer:
      name: Ventilator Woonkamer
      selector:
        entity:
          domain: switch
    temp_sensor_woonkamer:
      name: Temperatuursensor Woonkamer
      selector:
        entity:
          domain: sensor
          device_class: temperature
    fan_switch_slaapkamer:
      name: Ventilator Slaapkamer
      selector:
        entity:
          domain: switch
    temp_sensor_slaapkamer:
      name: Temperatuursensor Slaapkamer
      selector:
        entity:
          domain: sensor
          device_class: temperature
    fan_switch_kantoor:
      name: Ventilator Kantoor
      selector:
        entity:
          domain: switch
    temp_sensor_kantoor:
      name: Temperatuursensor Kantoor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    fan_switch_zolder:
      name: Ventilator Zolder
      selector:
        entity:
          domain: switch
    temp_sensor_zolder:
      name: Temperatuursensor Zolder
      selector:
        entity:
          domain: sensor
          device_class: temperature

    weather_sensor:
      name: Weersensor
      description: "Standaard: Buienradar"
      default: weather.buienradar
      selector:
        entity:
          domain: weather

    hysteresis_value:
      name: Hysteresis Waarde
      description: "De marge om te voorkomen dat de ventilator te snel schakelt."
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: "°C"
          mode: slider

    rain_threshold_value:
      name: Neerslagdrempel
      description: >
        Minimale hoeveelheid neerslag om de ventilator uit te schakelen.
      default: 0.1
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.1
          unit_of_measurement: "mm"
          mode: slider

    minimale_schakeltijd:
      name: Minimale Schakeltijd
      description: "Minimale tijd (in minuten) dat een ventilator aan of uit moet blijven voordat deze weer mag schakelen."
      default: 10
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: "minuten"
          mode: slider

variables:
  fan_switch_woonkamer_entity_id: !input 'fan_switch_woonkamer'
  temp_sensor_woonkamer_entity_id: !input 'temp_sensor_woonkamer'
  fan_switch_slaapkamer_entity_id: !input 'fan_switch_slaapkamer'
  temp_sensor_slaapkamer_entity_id: !input 'temp_sensor_slaapkamer'
  fan_switch_kantoor_entity_id: !input 'fan_switch_kantoor'
  temp_sensor_kantoor_entity_id: !input 'temp_sensor_kantoor'
  fan_switch_zolder_entity_id: !input 'fan_switch_zolder'
  temp_sensor_zolder_entity_id: !input 'temp_sensor_zolder'
  weather_entity_id: !input 'weather_sensor'
  hysteresis_value: !input 'hysteresis_value'
  rain_threshold_value: !input 'rain_threshold_value'
  minimale_schakeltijd_value: !input 'minimale_schakeltijd'

  buiten_temp: >
    {% set temp = state_attr(weather_entity_id, 'temperature') %}
    {% if temp is not none %}
      {{ temp | float }}
    {% else %}
      {{ states('sensor.last_known_buiten_temp') | float(15.0) }}
    {% endif %}

  neerslag: >
    {% set rain = state_attr(weather_entity_id, 'precipitation') %}
    {% if rain is not none %}
      {{ rain | float }}
    {% else %}
      0
    {% endif %}

  current_time: "{{ now() | as_timestamp }}"
  last_changed_woonkamer: "{{ states.switch.ventilator_woonkamer.last_changed | as_timestamp }}"
  last_changed_slaapkamer: "{{ states.switch.ventilator_slaapkamer.last_changed | as_timestamp }}"
  last_changed_kantoor: "{{ states.switch.ventilator_kantoor.last_changed | as_timestamp }}"
  last_changed_zolder: "{{ states.switch.ventilator_zolder.last_changed | as_timestamp }}"

trigger:
  - platform: time_pattern
    minutes: 5

action:
  - service: system_log.write
    data:
      message: >
        "Ventilatiecontrole uitgevoerd. Buiten temp: {{ buiten_temp }}°C, Woonkamer temp: {{ states(temp_sensor_woonkamer_entity_id) }}°C, Slaapkamer temp: {{ states(temp_sensor_slaapkamer_entity_id) }}°C, Kantoor temp: {{ states(temp_sensor_kantoor_entity_id) }}°C, Zolder temp: {{ states(temp_sensor_zolder_entity_id) }}°C, Neerslag: {{ neerslag }} mm."
      level: info

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ neerslag >= rain_threshold_value }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ fan_switch_woonkamer_entity_id }}"
          - service: system_log.write
            data:
              message: "Ventilator Woonkamer uitgeschakeld vanwege regen."

      - conditions:
          - condition: template
            value_template: "{{ current_time - last_changed_woonkamer > (minimale_schakeltijd_value * 60) }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ states(temp_sensor_woonkamer_entity_id) | float >= desired_temp_woonkamer_value + hysteresis_value }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ fan_switch_woonkamer_entity_id }}"
                  - service: system_log.write
                    data:
                      message: "Ventilator Woonkamer ingeschakeld."
  - service: system_log.write
    data:
      message: "Ventilator Woonkamer uitgeschakeld vanwege hoge buitentemperatuur."

mode: single
