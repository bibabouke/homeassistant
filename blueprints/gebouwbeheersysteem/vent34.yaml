blueprint:
  name: Ventilatiesysteem met Hysteresis en Minimaal Schakeltijd
  description: "Ventilatiesysteem met hysteresis en instelbare schakeltijd"
  domain: automation
  input:
    fan_switch:
      name: Ventilator Schakelaar
      description: "De ventilator die wordt bestuurd"
      selector:
        entity:
          domain: switch
    temp_sensor:
      name: Temperatuursensor
      description: "De sensor voor de temperatuur binnen"
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weather_sensor:
      name: Weersensor
      description: "De sensor voor de buitentemperatuur"
      selector:
        entity:
          domain: weather
    desired_temp:
      name: Gewenste Kamertemperatuur
      description: "De ingestelde temperatuur voor de kamer"
      selector:
        number:
          min: 0
          max: 40
          step: 0.5
          unit_of_measurement: °C
          mode: slider
    hysteresis:
      name: Hysteresis
      description: "De marge om te voorkomen dat de ventilator te snel aan- of uitschakelt"
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: °C
          mode: slider
    update_interval:
      name: Update Interval / Schakeltijd
      description: "Hoe vaak de sensor moet worden bijgewerkt en de minimale schakeltijd"
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: minuten
          mode: slider

variables:
  weather_entity_id: !input weather_sensor
  temp_sensor_entity_id: !input temp_sensor
  fan_switch_entity_id: !input fan_switch
  desired_temp_value: !input desired_temp
  hysteresis_value: !input hysteresis
  update_interval: !input update_interval
  buiten_temp: "{{ state_attr(weather_entity_id, 'temperature') | float(0) }}"
  binnentemperatuur: >
    {% if states(temp_sensor_entity_id) != 'unavailable' and states(temp_sensor_entity_id) != 'unknown' %}
      {{ states(temp_sensor_entity_id) | float(0) }}
    {% else %}
      0
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: "/{{ update_interval }}"  # Dit zorgt ervoor dat het patroon correct werkt
  - platform: state
    entity_id: !input fan_switch
    for:
      minutes: "{{ update_interval }}"

action:
  - service: system_log.write
    data:
      message: >
        "Buiten temp: {{ buiten_temp }}, Binnentemp: {{ binnentemperatuur }}, Ventilator status: {{ is_state(fan_switch_entity_id, 'on') }}"
      level: info

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ binnentemperatuur <= (desired_temp_value - hysteresis_value) and is_state(fan_switch_entity_id, 'on') }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch

      - conditions:
          - condition: template
            value_template: "{{ binnentemperatuur >= (desired_temp_value + hysteresis_value) and buiten_temp < binnentemperatuur and is_state(fan_switch_entity_id, 'off') }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input fan_switch
