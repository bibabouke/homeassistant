# Versie 5.11

blueprint:
  name: Ventilatiesysteem met Hysteresis en Fallbacks
  description: >
    Automatisch ventilatiesysteem dat de kamertemperatuur reguleert door buitenlucht te gebruiken.
    Inschakeling en uitschakeling zijn gebaseerd op hysteresis, en fallback waarden worden gebruikt als sensoren niet beschikbaar zijn.
  domain: automation
  input:

    # Sectie Ventilatoren
    ventilator_section:
      name: Ventilatoren
      icon: mdi:fan
      input:
        fan_switch:
          name: Ventilator Schakelaar
          description: "De ventilator die wordt bestuurd."
          selector:
            entity:
              domain: switch
        temp_sensor:
          name: Temperatuursensor Binnen
          description: "De sensor voor de temperatuur binnen."
          selector:
            entity:
              domain: sensor
              device_class: temperature

    # Sectie Weersensor
    weather_section:
      name: Weersensor
      icon: mdi:weather-partly-cloudy
      input:
        weather_sensor:
          name: Weersensor
          description: >
            Selecteer de weersensor voor buitentemperatuur en neerslag. Standaard is Buienradar.
          default: weather.buienradar
          selector:
            entity:
              domain: weather

    # Sectie Tweaks
    tweaks_section:
      name: Tweaks
      icon: mdi:tune
      input:
        desired_temp:
          name: Gewenste Kamertemperatuur
          description: "De ingestelde temperatuur voor de kamer."
          default: 21.0
          selector:
            number:
              min: 10
              max: 30
              step: 0.5
              unit_of_measurement: "째C"
        hysteresis:
          name: Hysteresis
          description: "De marge om te voorkomen dat de ventilator te snel schakelt."
          default: 0.5
          selector:
            number:
              min: 0.1
              max: 5.0
              step: 0.1
              unit_of_measurement: "째C"
        update_interval:
          name: Update Interval / Minimale Schakeltijd
          description: >
            Hoe vaak de automatisering controleert (in minuten) en de minimale tijd dat de ventilator
            aan of uit moet blijven voordat deze weer schakelt.
          default: 5
          selector:
            number:
              min: 1
              max: 60
              step: 1
              unit_of_measurement: "minuten"

variables:
  fan_switch_entity_id: !input 'fan_switch'
  temp_sensor_entity_id: !input 'temp_sensor'
  weather_entity_id: !input 'weather_sensor'
  desired_temp_value: !input 'desired_temp'
  hysteresis_value: !input 'hysteresis'
  update_interval_minutes: !input 'update_interval'

  # Huidige temperatuur binnen met fallback
  binnentemperatuur: >
    {% set temp = states(temp_sensor_entity_id) %}
    {% if temp not in ['unknown', 'unavailable'] %}
      {{ temp | float }}
    {% else %}
      {{ 21.0 }}  # Default waarde als fallback
    {% endif %}

  # Huidige temperatuur buiten met fallback
  buiten_temp: >
    {% set temp = state_attr(weather_entity_id, 'temperature') %}
    {% if temp is not none %}
      {{ temp | float }}
    {% else %}
      {{ 15.0 }}  # Default waarde als fallback
    {% endif %}

trigger:
  - platform: state
    entity_id:
      - !input 'temp_sensor'
      - !input 'weather_sensor'

condition: []

action:
  - service: system_log.write
    data:
      message: >
        "Ventilatiecontrole uitgevoerd. Buiten temp: {{ buiten_temp }}째C, Binnentemp: {{ binnentemperatuur }}째C, Ventilator is {{ states(fan_switch_entity_id) }}."
      level: info

  - variables:
      tijd_sinds_laatste_schakeling: >
        {{ (as_timestamp(now()) - as_timestamp(states[fan_switch_entity_id].last_changed)) / 60 }}

  - choose:
      - conditions:
          # Inschakelen als de binnentemperatuur > gewenste temp + hysteresis en buiten koeler is
          - condition: template
            value_template: >
              {{ binnentemperatuur > desired_temp_value + hysteresis_value
                 and buiten_temp < binnentemperatuur
                 and is_state(fan_switch_entity_id, 'off') }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input 'fan_switch'

      - conditions:
          # Uitschakelen als de binnentemperatuur <= gewenste temp of buiten warmer is en binnen koeler of gelijk is aan buiten
          - condition: template
            value_template: >
              {{ (binnentemperatuur <= desired_temp_value) or 
                 (buiten_temp > desired_temp_value and binnentemperatuur <= buiten_temp)
                 and is_state(fan_switch_entity_id, 'on') }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input 'fan_switch'

  # Wacht de ingestelde tijd voordat de automatisering weer wordt uitgevoerd
  - delay: "{{ update_interval_minutes * 60 }}"

mode: restart
