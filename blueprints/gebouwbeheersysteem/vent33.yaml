blueprint:
  name: Ventilatiesysteem met Hysteresis en Verbeteringen
  description: "Automatisch ventilatiesysteem met hysteresis, minimale schakeltijd en fallback voor sensorgegevens."
  domain: automation
  input:
    fan_switch:
      name: Ventilator
      description: "De ventilator om te schakelen."
      selector:
        entity:
          domain: switch
    temp_sensor:
      name: Temperatuursensor Binnen
      description: "Temperatuursensor voor binnen."
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weather_sensor:
      name: Weersensor Buiten
      description: "Weersensor voor de buitentemperatuur."
      selector:
        entity:
          domain: weather
    desired_temp:
      name: Gewenste Kamertemperatuur
      description: "De gewenste temperatuur in de kamer."
      default: 21.0
      selector:
        number:
          min: 10
          max: 30
          unit_of_measurement: "Â°C"
    hysteresis:
      name: Hysteresis
      description: "Hysteresiswaarde om onnodig schakelen te voorkomen."
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 2.0
          unit_of_measurement: "Â°C"
    update_interval:
      name: Update Interval / Schakeltijd
      description: "Interval voor het bijwerken van sensorgegevens en minimale schakeltijd van de ventilator."
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "minuten"

variables:
  weather_entity_id: !input 'weather_sensor'
  temp_sensor_entity_id: !input 'temp_sensor'
  fan_switch_entity_id: !input 'fan_switch'
  desired_temp_value: !input 'desired_temp'
  hysteresis_value: !input 'hysteresis'
  update_interval: !input 'update_interval'
  buiten_temp: >
    {% set temp = state_attr(weather_entity_id, 'temperature') %}
    {% if temp is not none %}
      {{ temp | float(0) }}
    {% else %}
      {{ last_triggered.buiten_temp | default(0) }}
    {% endif %}
  binnentemperatuur: >
    {% set temp = states(temp_sensor_entity_id) %}
    {% if temp != 'unavailable' and temp != 'unknown' %}
      {{ temp | float(0) }}
    {% else %}
      {{ last_triggered.binnentemperatuur | default(0) }}
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: "/{{ update_interval }}"  # Fix voor het update-interval zoals andere scripts
  - platform: state
    entity_id: !input 'temp_sensor'
  - platform: state
    entity_id: !input 'weather_sensor'

condition: []

action:
  - data:
      message: >
        "Buiten temp: {{ buiten_temp }}, Binnentemp: {{ binnentemperatuur }}, Ventilator status: {{ is_state(fan_switch_entity_id, 'on') }}"
      level: info
    service: system_log.write

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur <= desired_temp_value and is_state(fan_switch_entity_id, 'on') }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input 'fan_switch'
          - delay: "{{ update_interval * 60 }}"  # Minimumbedrijfstijd

      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur >= (desired_temp_value + hysteresis_value) and buiten_temp < binnentemperatuur and is_state(fan_switch_entity_id, 'off') }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input 'fan_switch'
          - delay: "{{ update_interval * 60 }}"  # Minimale uitschakeltijd

mode: single
