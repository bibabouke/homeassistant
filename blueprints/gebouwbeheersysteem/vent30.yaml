blueprint:
  name: Ventilatiesysteem met Hysteresis en Logging
  description: >
    Automatisch ventilatiesysteem met hysteresis en logging. Het systeem regelt de ventilator op basis van de binnen- en buitentemperatuur.
    De update interval dient tevens als de minimale schakeltijd voor de ventilator.
    
  domain: automation
  input:
    fan_switch:
      name: Ventilator schakelaar
      selector:
        entity:
          domain: switch
    temp_sensor:
      name: Binnen temperatuur sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weather_sensor:
      name: Buitentemperatuur sensor
      selector:
        entity:
          domain: weather
    desired_temp:
      name: Gewenste kamertemperatuur
      default: 21.0
      selector:
        number:
          min: 15.0
          max: 30.0
          step: 0.1
          unit_of_measurement: Â°C
    hysteresis:
      name: Hysteresis waarde
      default: 0.5
      description: De marge waarin de temperatuur mag schommelen voordat de ventilator weer wordt ingeschakeld.
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: Â°C
    update_interval:
      name: Update interval en minimale schakeltijd
      description: >
        Interval om sensoren te updaten en de minimale schakeltijd voor de ventilator in minuten.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: minutes

variables:
  fan_switch_entity_id: !input 'fan_switch'
  temp_sensor_entity_id: !input 'temp_sensor'
  weather_entity_id: !input 'weather_sensor'
  desired_temp_value: !input 'desired_temp'
  hysteresis_value: !input 'hysteresis'
  update_interval: !input 'update_interval'
  buiten_temp: "{{ state_attr(weather_entity_id, 'temperature') | float(0) }}"
  binnentemperatuur: >
    {% if states(temp_sensor_entity_id) not in ['unavailable', 'unknown', 'none'] %}
      {{ states(temp_sensor_entity_id) | float(0) }}
    {% else %}
      0
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: "{{ update_interval }}"
  - platform: state
    entity_id: !input 'fan_switch'
    for:
      minutes: "{{ update_interval }}"

action:
  - service: system_log.write
    data:
      message: >
        "Buiten temp: {{ buiten_temp }}, Binnentemp: {{ binnentemperatuur }}, Ventilator status: {{ is_state(fan_switch_entity_id, 'on') }}"

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur <= desired_temp_value and is_state(fan_switch_entity_id, 'on') }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch
          - service: system_log.write
            data:
              message: "Ventilator uitgeschakeld omdat de kamertemperatuur onder de gewenste temperatuur ligt."

          - delay: "00:{{ update_interval }}:00"

      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur >= (desired_temp_value + hysteresis_value) and buiten_temp < binnentemperatuur and is_state(fan_switch_entity_id, 'off') }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input fan_switch
          - service: system_log.write
            data:
              message: "Ventilator ingeschakeld omdat de kamertemperatuur boven de gewenste temperatuur met hysteresis ligt."

          - delay: "00:{{ update_interval }}:00"

mode: single
