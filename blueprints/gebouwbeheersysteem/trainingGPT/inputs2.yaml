Custom Inputs met Dynamische Selectie
Wat ik heb geleerd: Het dynamisch kiezen van entiteiten zoals schakelaars en sensoren via !input helpt om hardcoding te vermijden en maakt de blueprint flexibeler. Dit zorgt ervoor dat dezelfde blueprint meerdere keren kan worden toegepast voor verschillende entiteiten zonder de logica te wijzigen.

Voorbeeld:
input:
  fan_switch:
    name: Ventilator Schakelaar
    description: "De ventilator die wordt bestuurd."
    selector:
      entity:
        domain: switch

Gebruik van Selectors voor Inputvalidatie
Wat ik heb geleerd: Door het gebruik van selectors zoals number, boolean, en entity, kun je de gebruiker leiden bij het kiezen van de juiste waarden. Dit helpt fouten te voorkomen door vooraf bepaalde limieten of opties te bieden. Bijvoorbeeld, de number selector met een bereik en stapgrootte voor de hysteresis:

input:
  hysteresis:
    name: Hysteresis
    description: "De marge om te voorkomen dat de ventilator te snel schakelt."
    default: 0.5
    selector:
      number:
        min: 0.1
        max: 5.0
        step: 0.1
        unit_of_measurement: "Â°C"

Inputs in Variabelen Gebruiken
Wat ik heb geleerd: Inputs zoals !input kunnen direct in variabelen worden gebruikt om dynamisch te werken met de geselecteerde entiteiten en waarden. Dit maakt het script flexibel en voorkomt problemen als entiteiten of sensoren tijdelijk niet beschikbaar zijn.

Voorbeeld:
variables:
  fan_switch_entity_id: !input 'fan_switch'
  temp_sensor_entity_id: !input 'temp_sensor'

Conclusie:
Door het dynamische gebruik van inputs en selectors binnen de blueprint kan de automatisering zeer flexibel en herbruikbaar worden gemaakt. Dit zorgt ervoor dat dezelfde logica voor verschillende entiteiten en configuraties kan worden gebruikt zonder dat de gebruiker de blueprint zelf hoeft aan te passen.
