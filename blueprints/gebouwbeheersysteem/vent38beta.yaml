blueprint:
  name: Ventilatiesysteem met Hysteresis en Verbeteringen
  description: >
    Automatisch ventilatiesysteem met hysteresis, minimale schakeltijd,
    fallback voor sensorgegevens, en optimalisaties.
  domain: automation
  input:
    fan_switch:
      name: Ventilator Schakelaar
      description: "De ventilator die wordt bestuurd."
      selector:
        entity:
          domain: switch
    temp_sensor:
      name: Temperatuursensor Binnen
      description: "De sensor voor de temperatuur binnen."
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weather_sensor:
      name: Weersensor Buiten
      description: "De sensor voor de buitentemperatuur."
      selector:
        entity:
          domain: weather
    desired_temp:
      name: Gewenste Kamertemperatuur
      description: "De ingestelde temperatuur voor de kamer."
      default: 21.0
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "째C"
          mode: slider
    hysteresis:
      name: Hysteresis
      description: "De marge om te voorkomen dat de ventilator te snel schakelt."
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: "째C"
          mode: slider
    update_interval:
      name: Update Interval / Minimale Schakeltijd
      description: >
        Hoe vaak de automatisering controleert (in minuten) en de minimale tijd dat de ventilator
        aan of uit moet blijven voordat deze weer schakelt.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: "minuten"
          mode: slider

variables:
  fan_switch_entity_id: !input 'fan_switch'
  temp_sensor_entity_id: !input 'temp_sensor'
  weather_entity_id: !input 'weather_sensor'
  desired_temp_value: !input 'desired_temp'
  hysteresis_value: !input 'hysteresis'
  update_interval_minutes: !input 'update_interval'

  # Huidige temperatuur binnen
  binnentemperatuur: >
    {% set temp = states(temp_sensor_entity_id) %}
    {% if temp not in ['unknown', 'unavailable'] %}
      {{ temp | float }}
    {% else %}
      {{ states('sensor.last_known_binnentemperatuur') | float(21.0) }}
    {% endif %}

  # Huidige temperatuur buiten
  buiten_temp: >
    {% set temp = state_attr(weather_entity_id, 'temperature') %}
    {% if temp is not none %}
      {{ temp | float }}
    {% else %}
      {{ states('sensor.last_known_buiten_temp') | float(15.0) }}
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: 5  # Elke 5 minuten uitvoeren (vervang door een vaste waarde, zoals '5')

  - platform: state
    entity_id:
      - !input 'temp_sensor'
      - !input 'weather_sensor'

condition: []

action:
  - service: system_log.write
    data:
      message: >
        "Ventilatiecontrole uitgevoerd. Buiten temp: {{ buiten_temp }}째C, Binnentemp: {{ binnentemperatuur }}째C, Ventilator is {{ states(fan_switch_entity_id) }}."
      level: info

  # Opslaan van de laatste bekende temperaturen
  - service: homeassistant.update_entity
    target:
      entity_id: sensor.last_known_binnentemperatuur
  - service: homeassistant.update_entity
    target:
      entity_id: sensor.last_known_buiten_temp

  - variables:
      # Tijd sinds laatste wijziging van de ventilatorstatus
      tijd_sinds_laatste_schakeling: >
        {{ (as_timestamp(now()) - as_timestamp(states[fan_switch_entity_id].last_changed)) / 60 }}

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur <= desired_temp_value - hysteresis_value
                 and is_state(fan_switch_entity_id, 'on')
                 and tijd_sinds_laatste_schakeling >= update_interval_minutes }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input 'fan_switch'
          - service: system_log.write
            data:
              message: "Ventilator uitgeschakeld."
              level: info

      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur >= desired_temp_value + hysteresis_value
                 and buiten_temp < binnentemperatuur
                 and is_state(fan_switch_entity_id, 'off')
                 and tijd_sinds_laatste_schakeling >= update_interval_minutes }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input 'fan_switch'
          - service: system_log.write
            data:
              message: "Ventilator ingeschakeld."
              level: info

mode: single
