#Versie: alarmlampen versie 0.30

blueprint:
  name: Alarmlampen
  description: "Activeer lampen met een knop en stel kleur, intensiteit en tijdsduur in. Keert terug naar oorspronkelijke status na verloop van tijd."
  domain: automation
  input:
    trigger_knop:
      name: Trigger Knop
      description: "Kies de knop die de lampen moet activeren."
      selector:
        entity:
          domain: sensor

    lampen_selectie:
      name: Lampen Selectie
      description: "Selecteer de lampen die moeten reageren."
      selector:
        target:
          entity:
            domain: light

    lamp_kleur:
      name: Lamp Kleur
      description: "Kies de kleur voor de lampen."
      selector:
        color_rgb: {}

    intensiteit:
      name: Intensiteit
      description: "Stel de intensiteit van de lampen in (1-100%)."
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    tijdsduur:
      name: Tijdsduur (seconden)
      description: "Stel in hoelang de lampen aan moeten blijven."
      selector:
        number:
          min: 1
          max: 3600
          step: 1
          unit_of_measurement: "seconden"

trigger:
  - platform: state
    entity_id: !input trigger_knop

variables:
  lamp_status: >
    {% set status = {} %}
    {% for lamp in expand('!input lampen_selectie') %}
      {% set status = status | merge({lamp.entity_id: {
          'state': lamp.state,
          'brightness': lamp.attributes.brightness if lamp.state == 'on' else none,
          'color': lamp.attributes.rgb_color if lamp.state == 'on' else none
      }}) %}
    {% endfor %}
    {{ status }}

action:
  - service: light.turn_on
    target: !input lampen_selectie
    data:
      rgb_color: !input lamp_kleur
      brightness_pct: !input intensiteit

  - delay:
      seconds: !input tijdsduur

  - choose:
      # Herstel de originele status van elke lamp
      - conditions: "{{ lamp_status is defined }}"
        sequence:
          - repeat:
              count: "{{ lamp_status | count }}"
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: "{{ lamp_status.keys() | list | repeat.index0 }}"
                    brightness: "{{ lamp_status.values() | list | repeat.index0.brightness if lamp_status.values() | list | repeat.index0.state == 'on' }}"
                    rgb_color: "{{ lamp_status.values() | list | repeat.index0.color if lamp_status.values() | list | repeat.index0.state == 'on' }}"
                - service: light.turn_off
                  data:
                    entity_id: "{{ lamp_status.keys() | list | repeat.index0 }}"
                  when: "{{ lamp_status.values() | list | repeat.index0.state == 'off' }}"

mode: restart
