blueprint:
  name: IKEA E2001/E2002 STYRBAR Remote Control
  description: Controller for IKEA E2001/E2002 STYRBAR remote control via Zigbee2MQTT
  domain: automation
  input:
    controller_device:
      name: Controller
      selector:
        device:
          integration: zha
          manufacturer: IKEA of Sweden
          model: Remote Control E2001/E2002
    light:
      name: Light
      selector:
        entity:
          domain: light
    smooth_power_on:
      name: Smooth Power On
      description: Whether to smoothly power on the light or not.
      default: true
      selector:
        boolean: {}
    smooth_power_off:
      name: Smooth Power Off
      description: Whether to smoothly power off the light or not.
      default: true
      selector:
        boolean: {}
    on_brightness:
      name: On Brightness
      description: Brightness when turning on the light.
      default: 255
      selector:
        number:
          min: 1
          max: 255
          unit_of_measurement: brightness
    brightness_steps_short:
      name: Brightness Steps (short)
      description: Brightness steps for short press.
      default: 10
      selector:
        number:
          min: 1
          max: 255
          unit_of_measurement: brightness steps
    brightness_steps_long:
      name: Brightness Steps (long)
      description: Brightness steps for long press.
      default: 30
      selector:
        number:
          min: 1
          max: 255
          unit_of_measurement: brightness steps
    light_transition:
      name: Light Transition
      description: Transition time for light.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: seconds

variables:
  light: !input light
  light_color_mode: >
    {{ state_attr(light, "color_mode") or "none" }}
  light_color_mode_id: >
    {{ {"color_temp": "color_temp", "hs": "hs_color"}[light_color_mode] or "none" }}
  color_modes: {"color_temp": "color_temp", "hs": "hs_color"}
  max_brightness: 255
  min_brightness: 1
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off
  on_brightness: !input on_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  light_transition: !input light_transition
  light_color_mode_id: >
    {%- if light_color_mode == "none" -%} none
    {%- else -%} {{ color_modes[light_color_mode] }} {%- endif -%}
  light_state: '{{ states(light) }}'
  is_light_on: '{{ light_state == "on" }}'
  brightness_step_short: '{{ (max_brightness - min_brightness) / brightness_steps_short }}'
  brightness_step_long: '{{ (max_brightness - min_brightness) / brightness_steps_long }}'
  current_brightness: '{{ state_attr(light,"brightness") | int }}'
  target_brightness_up_short: '{{ max_brightness if current_brightness + brightness_step_short > max_brightness else current_brightness + brightness_step_short }}'
  target_brightness_up_long: '{{ max_brightness if current_brightness + brightness_step_long > max_brightness else current_brightness + brightness_step_long }}'
  target_brightness_down_short: '{{ min_brightness if current_brightness - brightness_step_short < min_brightness else current_brightness - brightness_step_short }}'
  target_brightness_down_long: '{{ min_brightness if current_brightness - brightness_step_long < min_brightness else current_brightness - brightness_step_long }}'
  target_brightness_on: '{{ min_brightness if on_brightness < min_brightness else max_brightness if on_brightness > max_brightness else on_brightness }}'
  fixed_hues: [0, 60, 120, 180, 240, 300]
  current_hue_index: >-
    {% set current_hue = state_attr(light, "hs_color")[0] or 0 %}
    {% for i in range(fixed_hues | length) %}
      {% if current_hue < fixed_hues[i] %}
        {{ i - 1 }}
        {% break %}
      {% endif %}
    {% endfor %}

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input controller_device

condition: []

action:
  - variables:
      action: '{{ trigger.event.data.action }}'
  - choose:
      - conditions: '{{ action == "toggle" }}'
        sequence:
          - choose:
              - conditions: '{{ is_light_on }}'
                sequence:
                  - service: light.turn_off
                    data:
                      transition: '{{ light_transition | float / 1000 }}'
                    target:
                      entity_id: !input light
              - conditions: '{{ not is_light_on }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: '{{ target_brightness_on }}'
                      transition: '{{ light_transition | float / 1000 }}'
                    target:
                      entity_id: !input light
      - conditions: '{{ action == "turn_on" }}'
        sequence:
          - service: light.turn_on
            data:
              brightness: '{{ target_brightness_on }}'
              transition: '{{ light_transition | float / 1000 }}'
            target:
              entity_id: !input light
      - conditions: '{{ action == "turn_off" }}'
        sequence:
          - service: light.turn_off
            data:
              transition: '{{ light_transition | float / 1000 }}'
            target:
              entity_id: !input light
      - conditions: '{{ action == "brightness_up" and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ is_light_on }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: '{{ target_brightness_up_short }}'
                      transition: 0.25
                    target:
                      entity_id: !input light
              - conditions: '{{ not is_light_on and smooth_power_on }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: '{{ min_brightness }}'
                      transition: 0.25
                    target:
                      entity_id: !input light
      - conditions: '{{ action == "brightness_down" and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ is_light_on }}'
                sequence:
                  - choose:
                      - conditions: '{{ smooth_power_off and current_brightness <= min_brightness }}'
                        sequence:
                          - service: light.turn_off
                            data:
                              transition: '{{ light_transition | float / 1000 }}'
                            target:
                              entity_id: !input light
                      - conditions: '{{ current_brightness > min_brightness }}'
                        sequence:
                          - service: light.turn_on
                            data:
                              brightness: '{{ target_brightness_down_short }}'
                              transition: 0.25
                            target:
                              entity_id: !input light
      - conditions: '{{ action == "brightness_up_repeat" and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ is_light_on }}'
                sequence:
                  - repeat:
                      while: '{{ true }}'
                      sequence:
                        - service: light.turn_on
                          data:
                            brightness: '{{ target_brightness_up_long }}'
                            transition: 0.25
                          target:
                            entity_id: !input light
                        - delay:
                            milliseconds: 250
              - conditions: '{{ not is_light_on and smooth_power_on }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: '{{ min_brightness }}'
                      transition: 0.25
                    target:
                      entity_id: !input light
      - conditions: '{{ action == "brightness_down_repeat" and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ is_light_on }}'
                sequence:
                  - repeat:
                      while: '{{ true }}'
                      sequence:
                        - choose:
                            - conditions: '{{ smooth_power_off and current_brightness <= min_brightness }}'
                              sequence:
                                - service: light.turn_off
                                  data:
                                    transition: '{{ light_transition | float / 1000 }}'
                                  target:
                                    entity_id: !input light
                                - stop: true
                        - service: light.turn_on
                          data:
                            brightness: '{{ target_brightness_down_long }}'
                            transition: 0.25
                          target:
                            entity_id: !input light
                        - delay:
                            milliseconds: 250
      - conditions: '{{ action == "color_up" and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ light_color_mode_id == "hs" }}'
                sequence:
                  - variables:
                      new_hue_index: '{{ (current_hue_index + 1) % (fixed_hues | length) }}'
                      new_hue: '{{ fixed_hues[new_hue_index] }}'
                  - service: light.turn_on
                    data:
                      hs_color: [ '{{ new_hue }}', 100 ]
                      transition: 0.25
                    target:
                      entity_id: !input light
              - conditions: '{{ light_color_mode_id == "color_temp" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      color_temp: '{{ state_attr(light,"min_mireds") + (state_attr(light,"max_mireds") - state_attr(light,"min_mireds")) / 5 * (trigger.event.data.action_value | int) }}'
                    target:
                      entity_id: !input light
mode: restart
