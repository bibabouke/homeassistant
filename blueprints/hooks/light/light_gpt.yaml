blueprint:
  name: Hook - Light
  description: >
    Hook automation which allows to control a light. Supports brightness and color control both for white temperature and rgb lights. Features may vary depending on the selected Controller.
    A list of controllers supported by this hook is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks/light#supported-controllers).
    📕 Full documentation regarding this blueprint is available [here](https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/website/docs/blueprints/hooks/light.mdx).
    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**.
    ℹ️ Version 2024.02.01 latest version available 
  source_url: https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/blueprints/hooks/light/light.yaml
  domain: automation
  input:
    controller_device:
      name: "(Required) Controller Device"
      description: "The controller device which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation."
      default: ''
      selector:
        device: {}
    controller_entity:
      name: "(Required) Controller Entity"
      description: "The controller entity which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation."
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: "(Required) Controller model"
      description: "The model for the controller used in this automation. Choose a value from the list of supported controllers."
      selector:
        select:
          options:
            - "IKEA E2001/E2002 STYRBAR Remote control"
            - "IKEA E2001/E2002 STYRBAR Remote control (#2)"
    light:
      name: "(Required) Light"
      description: "Light which will be controlled with this automation."
      selector:
        entity:
          domain: light
    light_color_mode:
      name: "(Optional) Light color mode"
      description: "Specify how the controller will set the light color. Choose \"Color Temperature\" and \"Hue - Saturation\" depending on the features supported by your light. If you are not sure you can select \"Auto\". \"None\" will disable color control features."
      default: "Auto"
      selector:
        select:
          options:
            - "Auto"
            - "Color Temperature"
            - "Hue - Saturation"
            - "Hue - Saturation Colors"
            - "None"
    light_transition:
      name: "(Optional) Light Transition"
      description: "Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it."
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box
    min_brightness:
      name: "(Optional) Light minimum brightness"
      description: "The minimum brightness the light can be set with this automation."
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    max_brightness:
      name: "(Optional) Light maximum brightness"
      description: "The maximum brightness the light can be set with this automation."
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    brightness_steps_short:
      name: "(Optional) Light brightness steps - short actions"
      description: "Number of steps from min to max brightness when controlling brightness with short actions (eg. button press)."
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    brightness_steps_long:
      name: "(Optional) Light brightness steps - long actions"
      description: "Number of steps from min to max brightness when controlling brightness with long actions (eg. button hold or controller rotation)."
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    force_brightness:
      name: "(Optional) Force brightness value at turn on"
      description: "Force brightness to the \"On brightness\" input value, when the light is being turned on."
      default: false
      selector:
        boolean: {}
    on_brightness:
      name: "(Optional) On brightness"
      description: "Brightness value to force when turning on the light"
      default: 1
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    smooth_power_on:
      name: "(Optional) Smooth power on"
      description: "Force the light to turn on at minimum brightness when a brightness up command (single or continuous) is triggered and light is off."
      default: true
      selector:
        boolean: {}
    smooth_power_off:
      name: "(Optional) Smooth power off"
      description: "Allow a brightness down command (single or continuous) to turn off the light when at minimum brightness. Disabling this will prevent the light from being turned off by brightness down commands."
      default: true
      selector:
        boolean: {}

variables:
  controller_model: !input controller_model
  light: !input light
  light_transition: !input light_transition
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  force_brightness: !input force_brightness
  on_brightness: !input on_brightness
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off

  controller_mapping:
    IKEA E2001/E2002 STYRBAR Remote control:
      turn_on: "button_up_short"
      brightness_up_repeat: "button_up_long"
      turn_off: "button_down_short"
      brightness_down_repeat: "button_down_long"
      color_down: "button_left_short"
      color_down_repeat: "button_left_long"
      color_up: "button_right_short"
      color_up_repeat: "button_right_long"
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      brightness_up: "button_up_short"
      brightness_up_repeat: "button_up_long"
      turn_on: "button_up_double"
      brightness_down: "button_down_short"
      brightness_down_repeat: "button_down_long"
      turn_off: "button_down_double"
      color_down: "button_left_short"
      color_down_repeat: "button_left_long"
      color_up: "button_right_short"
      color_up_repeat: "button_right_long"

  brightness_up: '{{ controller_mapping[controller_model]["brightness_up"] | default(None) }}'
  brightness_up_repeat: '{{ controller_mapping[controller_model]["brightness_up_repeat"] | default(None) }}'
  brightness_down: '{{ controller_mapping[controller_model]["brightness_down"] | default(None) }}'
  brightness_down_repeat: '{{ controller_mapping[controller_model]["brightness_down_repeat"] | default(None) }}'
  color_up: '{{ controller_mapping[controller_model]["color_up"] | default(None) }}'
  color_up_repeat: '{{ controller_mapping[controller_model]["color_up_repeat"] | default(None) }}'
  color_down: '{{ controller_mapping[controller_model]["color_down"] | default(None) }}'
  color_down_repeat: '{{ controller_mapping[controller_model]["color_down_repeat"] | default(None) }}'
  toggle: '{{ controller_mapping[controller_model]["toggle"] | default(None) }}'
  turn_on: '{{ controller_mapping[controller_model]["turn_on"] | default(None) }}'
  turn_off: '{{ controller_mapping[controller_model]["turn_off"] | default(None) }}'

  light_color_mode: !input light_color_mode
  color_modes:
    Auto: "auto"
    Color Temperature: "color_temp"
    Hue - Saturation: "hs_color"
    Hue - Saturation Colors: "hs_colors"
    None: "none"
  light_color_mode_id: >
    {%- if light_color_mode == "Auto" -%}
      {% set supported_color_modes = state_attr(light, "supported_color_modes") -%}
      {%- if "hs" in supported_color_modes or "xy" in supported_color_modes or "rgbw" in supported_color_modes or "rgbww" in supported_color_modes -%}
        {{ color_modes["Hue - Saturation"] }}
      {%- elif "color_temp" in supported_color_modes -%}
        {{ color_modes["Color Temperature"] }}
      {%- else -%}
        {{ color_modes["None"] }}
      {%- endif -%}
    {%- else -%}
      {{ color_modes[light_color_mode] }}
    {%- endif -%}

  predefined_colors: 
    - [0, 100]
    - [30, 100]
    - [60, 100]
    - [120, 100]
    - [180, 100]
    - [240, 100]

trigger:
  platform: event
  event_type: zha_event
  event_data:
    device_id: !input controller_device

condition: []

action:
  - variables:
      action: '{{ trigger.event.data.command }}'
  - choose:
      - conditions: '{{ action == toggle }}'
        sequence:
          - service: light.toggle
            data:
              transition: !input light_transition
            target:
              entity_id: !input light
      - conditions: '{{ action == turn_on }}'
        sequence:
          - service: light.turn_on
            data:
              transition: !input light_transition
              brightness: !input on_brightness
            target:
              entity_id: !input light
      - conditions: '{{ action == turn_off }}'
        sequence:
          - service: light.turn_off
            data:
              transition: !input light_transition
            target:
              entity_id: !input light
      - conditions: '{{ action == brightness_up }}'
        sequence:
          - choose:
              - conditions: '{{ states(light) == "off" and smooth_power_on }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: 1
                    target:
                      entity_id: !input light
              - conditions: '{{ states(light) == "on" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step: '{{ ((max_brightness - min_brightness) / brightness_steps_short) | round(0, "ceil") }}'
                    target:
                      entity_id: !input light
      - conditions: '{{ action == brightness_down }}'
        sequence:
          - choose:
              - conditions: '{{ states(light) == "on" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step: '-{{ ((max_brightness - min_brightness) / brightness_steps_short) | round(0, "ceil") }}'
                    target:
                      entity_id: !input light
              - conditions: '{{ states(light) == "on" and smooth_power_off }}'
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light
      - conditions: '{{ action == brightness_up_repeat }}'
        sequence:
          - choose:
              - conditions: '{{ states(light) == "off" and smooth_power_on }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: 1
                    target:
                      entity_id: !input light
              - conditions: '{{ states(light) == "on" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step: '{{ ((max_brightness - min_brightness) / brightness_steps_long) | round(0, "ceil") }}'
                    target:
                      entity_id: !input light
      - conditions: '{{ action == brightness_down_repeat }}'
        sequence:
          - choose:
              - conditions: '{{ states(light) == "on" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step: '-{{ ((max_brightness - min_brightness) / brightness_steps_long) | round(0, "ceil") }}'
                    target:
                      entity_id: !input light
              - conditions: '{{ states(light) == "on" and smooth_power_off }}'
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light
      - conditions: '{{ action == color_up and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ light_color_mode_id == "color_temp" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      color_temp: '{{ state_attr(light,"color_temp")|int + 50 }}'
                      transition: 0.25
                    entity_id: !input light
              - conditions: '{{ light_color_mode_id == "hs_color" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      hs_color: '{{ [((state_attr(light,"hs_color")[0] or 0) + 15) % 360, 100] }}'
                      transition: 0.25
                    entity_id: !input light
              - conditions: '{{ light_color_mode_id == "hs_colors" }}'
                sequence:
                  - variables:
                      current_color: '{{ state_attr(light,"hs_color")[0] or 0 }}'
                      next_color: '{{ (predefined_colors.index([current_color, 100]) + 1) % predefined_colors | length }}'
                  - service: light.turn_on
                    data:
                      hs_color: '{{ predefined_colors[next_color] }}'
                      transition: 0.25
                    entity_id: !input light
      - conditions: '{{ action == color_down and light_color_mode_id != "none" }}'
        sequence:
          - choose:
              - conditions: '{{ light_color_mode_id == "color_temp" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      color_temp: '{{ state_attr(light,"color_temp")|int - 50 }}'
                      transition: 0.25
                    entity_id: !input light
              - conditions: '{{ light_color_mode_id == "hs_color" }}'
                sequence:
                  - service: light.turn_on
                    data:
                      hs_color: '{{ [((state_attr(light,"hs_color")[0] or 0) - 15) % 360, 100] }}'
                      transition: 0.25
                    entity_id: !input light
              - conditions: '{{ light_color_mode_id == "hs_colors" }}'
                sequence:
                  - variables:
                      current_color: '{{ state_attr(light,"hs_color")[0] or 0 }}'
                      next_color: '{{ (predefined_colors.index([current_color, 100]) - 1) % predefined_colors | length }}'
                  - service: light.turn_on
                    data:
                      hs_color: '{{ predefined_colors[next_color] }}'
                      transition: 0.25
                    entity_id: !input light
