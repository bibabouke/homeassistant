# Blueprint metadata
blueprint:
  name: Hook - Light
  description: |
    # Hook - Light

    Hook automation which allows to control a light. Supports brightness and color control both for white temperature and rgb lights. Features may vary depending on the selected Controller.

    A list of controllers supported by this hook is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks/light#supported-controllers).

    📕 Full documentation regarding this blueprint is available [here](https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/website/docs/blueprints/hooks/light.mdx).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**.

    ℹ️ Version 2024.02.01 latest version available 
  source_url: https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/blueprints/hooks/light/light.yaml
  domain: automation
  input:
    controller_device:
      name: (Required) Controller Device
      description: The controller device which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        device: {}
    controller_entity:
      name: (Required) Controller Entity
      description: The controller entity which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: (Required) Controller model
      description: The model for the controller used in this automation. Choose a value from the list of supported controllers.
      selector:
        select:
          options:
            - IKEA E2001/E2002 STYRBAR Remote control
            - IKEA E2001/E2002 STYRBAR Remote control (#2)            
    light:
      name: (Required) Light
      description: Light which will be controlled with this automation.
      selector:
        entity:
          domain: light
    light_color_mode:
      name: (Optional) Light color mode
      description: Specify how the controller will set the light color. Choose "Color Temperature" and "Hue - Saturation" depending on the features supported by your light. If you are not sure you can select "Auto". "None" will disable color control features.
      default: Auto
      selector:
        select:
          options:
            - Auto
            - Color Temperature
            - Hue - Saturation
            - None
    light_transition:
      name: (Optional) Light Transition
      description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box
    min_brightness:
      name: (Optional) Light minimum brightness
      description: The minimum brightness the light can be set with this automation.
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    max_brightness:
      name: (Optional) Light maximum brightness
      description: The maximum brightness the light can be set with this automation.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    brightness_steps_short:
      name: (Optional) Light brightness steps - short actions
      description: Number of steps from min to max brightness when controlling brightness with short actions (eg. button press).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    brightness_steps_long:
      name: (Optional) Light brightness steps - long actions
      description: Number of steps from min to max brightness when controlling brightness with long actions (eg. button hold or controller rotation).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    force_brightness:
      name: (Optional) Force brightness value at turn on
      description: Force brightness to the "On brightness" input value, when the light is being turned on.
      default: false
      selector:
        boolean: {}
    on_brightness:
      name: (Optional) On brightness
      description: Brightness value to force when turning on the light
      default: 1
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    smooth_power_on:
      name: (Optional) Smooth power on
      description: Force the light to turn on at minimum brightness when a brightness up command (single or continuous) is triggered and light is off.
      default: true
      selector:
        boolean: {}
    smooth_power_off:
      name: (Optional) Smooth power off
      description: Allow a brightness down command (single or continuous) to turn off the light when at minimum brightness. Disabling this will prevent the light from being turned off by brightness down commands.
      default: true
      selector:
        boolean: {}
# Automation schema
variables:
  predefined_colors: 
    - [0, 100]    # Red
    - [30, 100]   # Orange
    - [60, 100]   # Yellow
    - [90, 100]   # Lime
    - [120, 100]  # Green
    - [150, 100]  # Turquoise
    - [180, 100]  # Cyan
    - [210, 100]  # Ocean
    - [240, 100]  # Blue
    - [270, 100]  # Purple
    - [300, 100]  # Magenta
    - [330, 100]  # Pink
    # ... Add more predefined colors as needed
  # convert blueprint inputs into variables to be used in templates
  controller_model: !input controller_model
  # supported controllers and mappings
  controller_mapping:
    IKEA E2001/E2002 STYRBAR Remote control:
      turn_on: button_up_short
      brightness_up_repeat: button_up_long
      turn_off: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_left_short
      color_down_repeat: button_left_long
      color_up: button_right_short
      color_up_repeat: button_right_long
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      turn_on: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      turn_off: button_down_double
      color_down: button_left_short
      color_down_repeat: button_left_long
      color_up: button_right_short
      color_up_repeat: button_right_long
  # pre-choose actions for buttons based on configured controller
  # no need to perform this task at automation runtime
  brightness_up: '{{ controller_mapping[controller_model]["brightness_up"] | default(None) }}'
  brightness_up_repeat: '{{ controller_mapping[controller_model]["brightness_up_repeat"] | default(None) }}'
  brightness_down: '{{ controller_mapping[controller_model]["brightness_down"] | default(None) }}'
  brightness_down_repeat: '{{ controller_mapping[controller_model]["brightness_down_repeat"] | default(None) }}'
  color_up: '{{ controller_mapping[controller_model]["color_up"] | default(None) }}'
  color_up_repeat: '{{ controller_mapping[controller_model]["color_up_repeat"] | default(None) }}'
  color_down: '{{ controller_mapping[controller_model]["color_down"] | default(None) }}'
  color_down_repeat: '{{ controller_mapping[controller_model]["color_down_repeat"] | default(None) }}'
  toggle: '{{ controller_mapping[controller_model]["toggle"] | default(None) }}'
  turn_on: '{{ controller_mapping[controller_model]["turn_on"] | default(None) }}'
  turn_off: '{{ controller_mapping[controller_model]["turn_off"] | default(None) }}'
  light_color_mode: !input light_color_mode
  light: !input light
  light_transition: !input light_transition
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  force_brightness: !input force_brightness
  on_brightness: !input on_brightness
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off
  event_light_color_mode: >
    {% if light_color_mode == "Auto" %}
      {{ state_attr(light, "color_mode") }}
    {% elif light_color_mode == "Color Temperature" %}
      color_temp
    {% elif light_color_mode == "Hue - Saturation" %}
      hs
    {% elif light_color_mode == "None" %}
      none
    {% else %}
      {{ state_attr(light, "color_mode") }}
    {% endif %}
trigger:
  platform: event
  event_type: zha_event
  event_data:
    device_ieee: !input controller_device
action:
  - choose:
      - conditions: "{{ turn_on != none and trigger.event.data.command == turn_on }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              brightness_pct: "{{ on_brightness }}"
      - conditions: "{{ turn_off != none and trigger.event.data.command == turn_off }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
      - conditions: "{{ brightness_up != none and trigger.event.data.command == brightness_up }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              brightness_step_pct: "{{ brightness_steps_short }}"
      - conditions: "{{ brightness_up_repeat != none and trigger.event.data.command == brightness_up_repeat }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              brightness_step_pct: "{{ brightness_steps_long }}"
      - conditions: "{{ brightness_down != none and trigger.event.data.command == brightness_down }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              brightness_step_pct: "-{{ brightness_steps_short }}"
      - conditions: "{{ brightness_down_repeat != none and trigger.event.data.command == brightness_down_repeat }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              brightness_step_pct: "-{{ brightness_steps_long }}"
      - conditions: "{{ color_up != none and trigger.event.data.command == color_up and event_light_color_mode == 'hs' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              hs_color:
                - >
                    {% set current_hs = state_attr(light, 'hs_color') %}
                    {% set current_h = current_hs[0] if current_hs else 0 %}
                    {% set new_h = (current_h + 30) % 360 %}
                    {{ new_h }}
                - "{{ state_attr(light, 'hs_color')[1] if state_attr(light, 'hs_color') else 100 }}"
      - conditions: "{{ color_down != none and trigger.event.data.command == color_down and event_light_color_mode == 'hs' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              hs_color:
                - >
                    {% set current_hs = state_attr(light, 'hs_color') %}
                    {% set current_h = current_hs[0] if current_hs else 0 %}
                    {% set new_h = (current_h - 30) % 360 %}
                    {{ new_h }}
                - "{{ state_attr(light, 'hs_color')[1] if state_attr(light, 'hs_color') else 100 }}"
      - conditions: "{{ color_up_repeat != none and trigger.event.data.command == color_up_repeat and event_light_color_mode == 'hs' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              hs_color:
                - >
                    {% set current_hs = state_attr(light, 'hs_color') %}
                    {% set current_h = current_hs[0] if current_hs else 0 %}
                    {% set new_h = (current_h + 1) % 360 %}
                    {{ new_h }}
                - "{{ state_attr(light, 'hs_color')[1] if state_attr(light, 'hs_color') else 100 }}"
      - conditions: "{{ color_down_repeat != none and trigger.event.data.command == color_down_repeat and event_light_color_mode == 'hs' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              hs_color:
                - >
                    {% set current_hs = state_attr(light, 'hs_color') %}
                    {% set current_h = current_hs[0] if current_hs else 0 %}
                    {% set new_h = (current_h - 1) % 360 %}
                    {{ new_h }}
                - "{{ state_attr(light, 'hs_color')[1] if state_attr(light, 'hs_color') else 100 }}"
      - conditions: "{{ color_up != none and trigger.event.data.command == color_up and event_light_color_mode == 'color_temp' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              color_temp:
                - >
                    {% set current_temp = state_attr(light, 'color_temp') %}
                    {% set new_temp = (current_temp + 50) %}
                    {{ new_temp }}
      - conditions: "{{ color_down != none and trigger.event.data.command == color_down and event_light_color_mode == 'color_temp' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              color_temp:
                - >
                    {% set current_temp = state_attr(light, 'color_temp') %}
                    {% set new_temp = (current_temp - 50) %}
                    {{ new_temp }}
      - conditions: "{{ color_up_repeat != none and trigger.event.data.command == color_up_repeat and event_light_color_mode == 'color_temp' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              color_temp:
                - >
                    {% set current_temp = state_attr(light, 'color_temp') %}
                    {% set new_temp = (current_temp + 10) %}
                    {{ new_temp }}
      - conditions: "{{ color_down_repeat != none and trigger.event.data.command == color_down_repeat and event_light_color_mode == 'color_temp' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light
            data:
              transition: !input light_transition
              color_temp:
                - >
                    {% set current_temp = state_attr(light, 'color_temp') %}
                    {% set new_temp = (current_temp - 10) %}
                    {{ new_temp }}
  default: []
