blueprint:
  name: Example - Toggle light on press
  description: 'Control your lights with a Xiaomi WXKG11LM Aqara Wireless Switch Mini'
  domain: automation
  input:
    button:
      name: (Required) Button
      description: Button to use to control the light.
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
          multiple: false
          filter:
            include_entities:
              - binary_sensor.switch_158d00016b2a32
    light:
      name: (Required) Light
      description: Light which will be controlled with this automation.
      selector:
        entity:
          domain: light
    light_color_mode:
      name: (Optional) Light color mode
      description: Specify how the controller will set the light color. Choose "Color Temperature" and "Hue - Saturation" depending on the features supported by your light. If you are not sure you can select "Auto". "None" will disable color control features.
      default: Auto
      selector:
        select:
          options:
            - Auto
            - Color Temperature
            - Hue - Saturation
            - None
    light_transition:
      name: (Optional) Light Transition
      description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box
    min_brightness:
      name: (Optional) Light minimum brightness
      description: The minimum brightness the light can be set with this automation.
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    max_brightness:
      name: (Optional) Light maximum brightness
      description: The maximum brightness the light can be set with this automation.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    brightness_steps_short:
      name: (Optional) Light brightness steps - short actions
      description: Number of steps from min to max brightness when controlling brightness with short actions (eg. button press).
      default: 10
      selector:
        number:
          min: 1
          max: 50
          step: 1
          unit_of_measurement: steps
          mode: slider
    brightness_steps_long:
      name: (Optional) Light brightness steps - long actions
      description: Number of steps from min to max brightness when controlling brightness with long actions (eg. button long press).
      default: 25
      selector:
        number:
          min: 1
          max: 50
          step: 1
          unit_of_measurement: steps
          mode: slider
    min_color_temp:
      name: (Optional) Minimum color temperature
      description: The minimum color temperature the light can be set with this automation.
      default: 2500
      selector:
        number:
          min: 1000
          max: 10000
          step: 50
          unit_of_measurement: kelvin
          mode: slider
    max_color_temp:
      name: (Optional) Maximum color temperature
      description: The maximum color temperature the light can be set with this automation.
      default: 6500
      selector:
        number:
          min: 1000
          max: 10000
          step: 50
          unit_of_measurement: kelvin
          mode: slider

mode: single

# Main automation logic
trigger:
  platform: state
  entity_id: !input button
  to: 'on'

action:
  - choose:
      - conditions: '{{ action == color_up_repeat and light_color_mode_id != "none" }}'
        sequence:
          choose:
            - conditions: '{{ light_color_mode_id == "color_temp" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          color_temp: '{{ state_attr(light, "color_temp")|int + 50 }}'
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
            - conditions: '{{ light_color_mode_id == "hs_color" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          hs_color: >
                            {% set colors = [
                              [240, 100], [220, 100], [200, 100], [50, 100],
                              [35, 100], [30, 100], [20, 100], [30, 100],
                              [25, 100], [20, 100], [10, 100], [0, 100],
                              [340, 100], [320, 100], [300, 100], [280, 100],
                              [240, 100], [210, 100], [120, 100], [60, 100]
                            ] %}
                            {% set current_hue = state_attr(light, "hs_color")[0] or 0 %}
                            {% set next_index = (colors | map(attribute=0) | list).index(current_hue) + 1 %}
                            {% if next_index >= colors | length %}
                              {% set next_index = 0 %}
                            {% endif %}
                            {{ colors[next_index] }}
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
      - conditions: '{{ action == color_down_repeat and light_color_mode_id != "none" }}'
        sequence:
          choose:
            - conditions: '{{ light_color_mode_id == "color_temp" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          color_temp: '{{ [state_attr(light, "color_temp")|int - 50, 1] | max }}'
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
            - conditions: '{{ light_color_mode_id == "hs_color" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          hs_color: >
                            {% set colors = [
                              [240, 100], [220, 100], [200, 100], [50, 100],
                              [35, 100], [30, 100], [20, 100], [30, 100],
                              [25, 100], [20, 100], [10, 100], [0, 100],
                              [340, 100], [320, 100], [300, 100], [280, 100],
                              [240, 100], [210, 100], [120, 100], [60, 100]
                            ] %}
                            {% set current_hue = state_attr(light, "hs_color")[0] or 0 %}
                            {% set prev_index = (colors | map(attribute=0) | list).index(current_hue) - 1 %}
                            {% if prev_index < 0 %}
                              {% set prev_index = colors | length - 1 %}
                            {% endif %}
                            {{ colors[prev_index] }}
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
  - conditions: '{{ action == color_up and light_color_mode_id == "none" }}'
    sequence:
      - service: light.toggle
        entity_id: !input light
  - conditions: '{{ action == color_down and light_color_mode_id == "none" }}'
    sequence:
      - service: light.toggle
        entity_id: !input light
