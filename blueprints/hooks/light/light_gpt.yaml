# Blueprint metadata
blueprint:
  name: Hook - Light
  description: |
    # Hook - Light

    Hook automation which allows to control a light. Supports brightness and color control both for white temperature and rgb lights. Features may vary depending on the selected Controller.

    An automation created with this blueprint must be linked to a [Controller](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers) automation.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    They expose an abstract interface used by Hooks to create controller-based automations.

    A list of controllers supported by this hook is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks/light#supported-controllers).

    üìï Full documentation regarding this blueprint is available [here](https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/website/docs/blueprints/hooks/light.mdx).

    üöÄ This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**.

    ‚ÑπÔ∏è Version 2024.02.01 latest version available 
  source_url: https://github.com/lsismeiro/awesome-ha-blueprints/blob/main/blueprints/hooks/light/light.yaml
  domain: automation
  input:
    controller_device:
      name: (Required) Controller Device
      description: The controller device which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Required) Controller Entity
      description: The controller entity which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: (Required) Controller model
      description: The model for the controller used in this automation. Choose a value from the list of supported controllers.
      selector:
        select:
          options:
            - IKEA E1524/E1810 TR√ÖDFRI Wireless 5-Button Remote
            - IKEA E1743 TR√ÖDFRI On/Off Switch & Dimmer
            - IKEA E1743 TR√ÖDFRI On/Off Switch & Dimmer (#2)
            - IKEA E1744 SYMFONISK Rotary Remote
            - IKEA E1766 TR√ÖDFRI Open/Close Remote
            - IKEA E1766 TR√ÖDFRI Open/Close Remote (#2)
            - IKEA E1812 TR√ÖDFRI Shortcut button
            - IKEA E2001/E2002 STYRBAR Remote control
            - IKEA E2001/E2002 STYRBAR Remote control (#2)
            - IKEA ICTC-G-1 TR√ÖDFRI wireless dimmer
            - OSRAM AC025XX00NJ SMART+ Switch Mini
            - Philips 324131092621 Hue Dimmer switch
            - Philips 324131137411 Hue Dimmer switch
            - Philips 8718699693985 Hue Smart Button
            - Philips 929002398602 Hue Dimmer switch v2
            - SONOFF SNZB-01 Wireless Switch
            - Xiaomi WXCJKG11LM Aqara Opple 2 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3)
            - Xiaomi WXKG11LM Aqara Wireless Switch Mini
    light:
      name: (Required) Light
      description: Light which will be controlled with this automation.
      selector:
        entity:
          domain: light
    light_color_mode:
      name: (Optional) Light color mode
      description: Specify how the controller will set the light color. Choose "Color Temperature" and "Hue - Saturation" depending on the features supported by your light. If you are not sure you can select "Auto". "None" will disable color control features.
      default: Auto
      selector:
        select:
          options:
            - Auto
            - Color Temperature
            - Hue - Saturation
            - None
    light_transition:
      name: (Optional) Light Transition
      description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box
    min_brightness:
      name: (Optional) Light minimum brightness
      description: The minimum brightness the light can be set with this automation.
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    max_brightness:
      name: (Optional) Light maximum brightness
      description: The maximum brightness the light can be set with this automation.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    brightness_steps_short:
      name: (Optional) Light brightness steps - short actions
      description: Number of steps from min to max brightness when controlling brightness with short actions (eg. button press).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    brightness_steps_long:
      name: (Optional) Light brightness steps - long actions
      description: Number of steps from min to max brightness when controlling brightness with long actions (eg. button hold or controller rotation).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    force_brightness:
      name: (Optional) Force brightness value at turn on
      description: Force brightness to the "On brightness" input value, when the light is being turned on.
      default: false
      selector:
        boolean:
    on_brightness:
      name: (Optional) On brightness
      description: Brightness value to force when turning on the light
      default: 1
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    smooth_power_on:
      name: (Optional) Smooth power on
      description: Force the light to turn on at minimum brightness when a brightness up command (single or continuous) is triggered and light is off.
      default: true
      selector:
        boolean:
    smooth_power_off:
      name: (Optional) Smooth power off
      description: Allow a brightness down command (single or continuous) to turn off the light when at minimum brightness. Disabling this will prevent the light from being turned off by brightness down commands.
      default: true
      selector:
        boolean:
    night_mode:
      name: (Optional) Night mode
      description: Enable night mode, reducing brightness and adjusting color temperature to a warmer setting during night hours.
      default: false
      selector:
        boolean:
    night_mode_start:
      name: (Optional) Night mode start time
      description: Start time for night mode in HH:MM format.
      default: '22:00'
      selector:
        time:
    night_mode_end:
      name: (Optional) Night mode end time
      description: End time for night mode in HH:MM format.
      default: '07:00'
      selector:
        time:
# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_model: !input controller_model
  # supported controllers and mappings
  controller_mapping:
    IKEA E1524/E1810 TR√ÖDFRI Wireless 5-Button Remote:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_left_short
      color_down_repeat: button_left_long
      color_up: button_right_short
      color_up_repeat: button_right_long
      toggle: button_center_short
    IKEA E1743 TR√ÖDFRI On/Off Switch & Dimmer:
      turn_on: button_up_short
      brightness_up_repeat: button_up_long
      color_up: button_up_double
      turn_off: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_down_double
    IKEA E1743 TR√ÖDFRI On/Off Switch & Dimmer (#2):
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      turn_on: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      turn_off: button_down_double
    IKEA E1744 SYMFONISK Rotary Remote:
      brightness_up_repeat: button_rotate_right
      brightness_down_repeat: button_rotate_left
      brightness_stop: button_rotate_stop
      toggle: button_short
      toggle_hold: button_long
    IKEA E1766 TR√ÖDFRI Open/Close Remote:
      color_up: button_open_short
      color_down: button_open_double
      brightness_up_repeat: button_open_long
      brightness_down_repeat: button_close_long
      brightness_stop: button_open_release
      toggle: button_close_short
      turn_off: button_close_double
    IKEA E1766 TR√ÖDFRI Open/Close Remote (#2):
      brightness_up_repeat: button_open_long
      brightness_stop: button_open_release
      turn_on: button_open_short
      brightness_down_repeat: button_close_long
      brightness_stop: button_close_release
      turn_off: button_close_short
    IKEA E1812 TR√ÖDFRI Shortcut button:
      toggle: button_short
    IKEA E2001/E2002 STYRBAR Remote control:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      toggle: button_center_short
      turn_off: button_center_long
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      brightness_up_repeat: button_up_long
      brightness_down_repeat: button_down_long
      toggle: button_up_short
      turn_on: button_center_short
      turn_off: button_down_short
    IKEA ICTC-G-1 TR√ÖDFRI wireless dimmer:
      brightness_up_repeat: button_rotate_right
      brightness_down_repeat: button_rotate_left
      brightness_stop: button_rotate_stop
    OSRAM AC025XX00NJ SMART+ Switch Mini:
      brightness_up: button_1_short
      brightness_up_repeat: button_1_long
      brightness_down: button_3_short
      brightness_down_repeat: button_3_long
      color_temp_up: button_2_short
      color_temp_down: button_4_short
    Philips 324131092621 Hue Dimmer switch:
      turn_on: button_1_short
      turn_off: button_4_short
      brightness_up: button_2_short
      brightness_up_repeat: button_2_long
      brightness_down: button_3_short
      brightness_down_repeat: button_3_long
    Philips 324131137411 Hue Dimmer switch:
      turn_on: button_1_short
      turn_off: button_4_short
      brightness_up: button_2_short
      brightness_up_repeat: button_2_long
      brightness_down: button_3_short
      brightness_down_repeat: button_3_long
    Philips 8718699693985 Hue Smart Button:
      toggle: button_short
      brightness_up_repeat: button_long
      brightness_stop: button_release
    Philips 929002398602 Hue Dimmer switch v2:
      turn_on: button_1_short
      turn_off: button_4_short
      brightness_up: button_2_short
      brightness_up_repeat: button_2_long
      brightness_down: button_3_short
      brightness_down_repeat: button_3_long
    SONOFF SNZB-01 Wireless Switch:
      toggle: button_single
      turn_off: button_double
    Xiaomi WXCJKG11LM Aqara Opple 2 button remote:
      toggle: button_1_single
      brightness_up: button_2_single
      brightness_up_repeat: button_2_hold
      brightness_down: button_2_double
      brightness_stop: button_2_release
      color_up: button_1_double
      color_down: button_1_hold
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote:
      toggle: button_1_single
      turn_off: button_1_double
      brightness_up: button_3_single
      brightness_up_repeat: button_3_hold
      brightness_stop: button_3_release
      brightness_down: button_4_single
      brightness_down_repeat: button_4_hold
      brightness_stop: button_4_release
      color_up: button_2_single
      color_down: button_2_double
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2):
      brightness_up: button_3_single
      brightness_up_repeat: button_3_hold
      brightness_stop: button_3_release
      brightness_down: button_4_single
      brightness_down_repeat: button_4_hold
      brightness_stop: button_4_release
      color_up: button_2_single
      color_down: button_2_double
      turn_on: button_1_single
      turn_off: button_1_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote:
      toggle: button_1_single
      brightness_up: button_3_single
      brightness_up_repeat: button_3_hold
      brightness_stop: button_3_release
      brightness_down: button_4_single
      brightness_down_repeat: button_4_hold
      brightness_stop: button_4_release
      color_up: button_5_single
      color_down: button_5_double
      turn_off: button_6_single
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2):
      toggle: button_1_single
      brightness_up: button_3_single
      brightness_up_repeat: button_3_hold
      brightness_stop: button_3_release
      brightness_down: button_4_single
      brightness_down_repeat: button_4_hold
      brightness_stop: button_4_release
      color_up: button_5_single
      color_down: button_5_double
      turn_off: button_6_single
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3):
      brightness_up: button_3_single
      brightness_up_repeat: button_3_hold
      brightness_stop: button_3_release
      brightness_down: button_4_single
      brightness_down_repeat: button_4_hold
      brightness_stop: button_4_release
      color_up: button_5_single
      color_down: button_5_double
      turn_on: button_1_single
      turn_off: button_6_single
    Xiaomi WXKG11LM Aqara Wireless Switch Mini:
      toggle: button_single
  # retrieve controller mapping for selected controller model
  controller_mapping: '{{ controller_mapping[controller_model] }}'
  controller_device: !input controller_device
  controller_entity: !input controller_entity
  light: !input light
  light_color_mode: !input light_color_mode
  light_transition: !input light_transition
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  force_brightness: !input force_brightness
  on_brightness: !input on_brightness
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off
  night_mode: !input night_mode
  night_mode_start: !input night_mode_start
  night_mode_end: !input night_mode_end

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input controller_device
  - platform: state
    entity_id: !input controller_entity

condition:
  - "{{ trigger.event.data.device_ieee == state_attr(controller_entity, 'device_ieee') }}"
  - "{{ trigger.event.data.command == controller_mapping[trigger.event.data.args['button']] }}"

action:
  - choose:
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['toggle'] }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: "{{ light }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['brightness_up'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              brightness_step_pct: "{{ brightness_steps_short }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['brightness_up_repeat'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              brightness_step_pct: "{{ brightness_steps_long }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['brightness_down'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              brightness_step_pct: "{{ -brightness_steps_short }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['brightness_down_repeat'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              brightness_step_pct: "{{ -brightness_steps_long }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['turn_on'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['turn_off'] }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ light }}"
  - choose:
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['color_up'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              kelvin: "{{ state_attr(light, 'min_mireds') | int }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['color_down'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              kelvin: "{{ state_attr(light, 'max_mireds') | int }}"
  - choose:
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['toggle_hold'] }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: "{{ light }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['toggle_double'] }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: "{{ light }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['toggle_triple'] }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: "{{ light }}"
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['toggle_quadruple'] }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: "{{ light }}"
  - choose:
      - conditions:
          - "{{ trigger.event.data.command == controller_mapping['brightness_stop'] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              brightness_step_pct: 0
